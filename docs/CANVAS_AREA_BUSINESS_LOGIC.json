{
  "canvas_area": {
    "name": "Canvas Area (Middle Panel)",
    "purpose": "Visual form building workspace with form metadata management and drag-drop functionality",
    "location": "src/features/form-builder/components/FormBuilder.tsx (main layout) + Canvas.tsx (wrapper) + react-drag-canvas package",
    
    "structure": {
      "form_page_card": {
        "description": "Card for managing form title and page navigation/creation",
        "implementation": "FormPageCard.tsx component in FormBuilder.tsx layout",
        "components": {
          "form_title": {
            "description": "Editable form name with validation and auto-save",
            "implementation": {
              "component": "form-title-input",
              "state_source": "formState.name via useFormBuilder hook",
              "validation": {
                "max_length": 100,
                "empty_handling": "Auto-fills 'Untitled Form' on blur",
                "trim_whitespace": "Automatically trims spaces on blur"
              },
              "real_time_updates": "onChange updates state immediately",
              "fallback_behavior": "Shows 'Untitled Form' if empty or null"
            },
            "user_interactions": {
              "typing": "Real-time state updates via setTemplateName",
              "blur_event": "Validates and applies fallback if empty",
              "focus_states": "Visual feedback with border and shadow"
            }
          },
          "page_management": {
            "description": "Multi-page form navigation with page creation and reordering",
            "implementation": {
              "component": "FormWizardNavigation",
              "state_management": "useFormBuilder hook manages page state",
              "page_tracking": {
                "current_page": "formState.currentPageId",
                "page_index": "getCurrentPageIndex() calculation",
                "total_pages": "formState.pages.length"
              }
            },
            "navigation_logic": {
              "previous_button": {
                "visibility": "Always visible",
                "enabled_state": "canGoBack (currentPageIndex > 0)",
                "action": "navigateToPreviousPage() via SWITCH_PAGE action"
              },
              "next_button": {
                "visibility": "Hidden on last page",
                "enabled_state": "canGoNext (currentPageIndex < totalPages - 1)",
                "action": "navigateToNextPage() via SWITCH_PAGE action"
              },
              "submit_button": {
                "visibility": "Only visible on last page",
                "enabled_state": "Always enabled on last page",
                "action": "handleFormSubmit() validates and submits form"
              },
              "add_page_button": {
                "visibility": "Always visible",
                "enabled_state": "Always enabled",
                "action": "addNewPage() creates new page with auto-generated title"
              },
              "reorder_pages": {
                "description": "Drag-and-drop to rearrange page order",
                "implementation": "DragDropPageList with react-dnd for page reordering",
                "action": "reorderPages(pageId, newIndex) updates formState.pages order"
              }
            },
            "page_title_management": {
              "description": "Individual page title editing",
              "implementation": {
                "current_page_title": "currentPage?.title || 'Untitled Page'",
                "update_mechanism": "updatePageTitle(pageId, title) via UPDATE_PAGE_TITLE action",
                "display": "Editable input in page card"
              },
              "validation": {
                "fallback": "Defaults to 'Untitled Page' if empty",
                "real_time_updates": "Immediate state updates on change"
              }
            }
          }
        },
        "styling": {
          "class": "form-page-card",
          "layout": "Top section of middle panel, spans full width",
          "styling": "Card with border, shadow, and padding"
        }
      },
      "canvas_card": {
        "description": "Card for drag-and-drop component arrangement and rendering",
        "implementation": "CanvasCard.tsx component wrapping Canvas.tsx in FormBuilder.tsx layout",
        "business_logic": {
          "core_functionality": {
            "visual_form_building": {
              "description": "Interactive workspace where users build forms by arranging components",
              "implementation": "DragDropCanvas with SmartDropZone components",
              "rendering": "CSPSafeComponentRenderer for PWA compliance",
              "state_source": "currentComponents from useFormBuilder hook"
            },
            "drag_drop_system": {
              "description": "Advanced drag-drop with position detection and visual feedback",
              "drop_zones": {
                "empty_canvas": "Accepts new components when canvas is empty",
                "smart_zones": "Position-aware drop zones around existing components",
                "horizontal_layouts": "Side-by-side component arrangements",
                "vertical_reordering": "Before/after positioning for components"
              },
              "position_detection": {
                "left_right": "25% threshold for horizontal layouts",
                "top_bottom": "30% threshold for vertical positioning",
                "center": "Maps to empty_canvas for empty canvas drops, otherwise appends to end for populated canvas"
              },
              "layout_creation_rules": {
                "empty_canvas_drop": {
                  "description": "First component dropped creates column layout",
                  "implementation": "Component appears in center with vertical stacking default",
                  "container": "No layout container needed for single component",
                  "default_layout": "column (vertical) layout initialized"
                },
                "vertical_positioning": {
                  "drop_above": {
                    "trigger": "Drop in top 30% of existing component",
                    "result": "Component inserted before existing component in column",
                    "layout": "Maintains or creates vertical column layout"
                  },
                  "drop_below": {
                    "trigger": "Drop in bottom 30% of existing component", 
                    "result": "Component inserted after existing component in column",
                    "layout": "Maintains or creates vertical column layout"
                  }
                },
                "horizontal_positioning": {
                  "drop_left": {
                    "trigger": "Drop in left 25% of existing component",
                    "result": "Creates horizontal row layout with new component on left",
                    "container": "Wraps both components in HorizontalLayout container"
                  },
                  "drop_right": {
                    "trigger": "Drop in right 25% of existing component",
                    "result": "Creates horizontal row layout with new component on right", 
                    "container": "Wraps both components in HorizontalLayout container"
                  }
                },
                "layout_containers": {
                  "column_layout": {
                    "description": "Default vertical stacking of components",
                    "implementation": "Components arranged top-to-bottom",
                    "container_type": "Implicit - no wrapper component needed"
                  },
                  "row_layout": {
                    "description": "Horizontal side-by-side arrangement",
                    "implementation": "HorizontalLayout wrapper component",
                    "container_type": "Explicit wrapper with children array"
                  }
                }
              },
              "component_reordering": {
                "within_column": {
                  "description": "Drag existing component to new vertical position",
                  "drop_zones": "Before/after indicators between components",
                  "implementation": "Array index reordering in components list"
                },
                "within_row": {
                  "description": "Drag component to different position in horizontal layout",
                  "drop_zones": "Left/right indicators within row container",
                  "implementation": "Reorder children array in HorizontalLayout"
                },
                "between_layouts": {
                  "description": "Move component from row to column or vice versa",
                  "extraction": "Remove from current container",
                  "insertion": "Add to target position with layout rules"
                }
              },
              "layout_dissolution": {
                "row_to_single": {
                  "trigger": "When HorizontalLayout has only one child remaining",
                  "action": "Remove HorizontalLayout wrapper container",
                  "result": "Single component promoted to parent level",
                  "positioning": "Component takes position of dissolved container"
                },
                "automatic_cleanup": {
                  "description": "System automatically removes empty layout containers",
                  "implementation": "Triggered after component removal or movement",
                  "validation": "Ensures no empty containers remain in form structure"
                }
              }
            },
            "component_selection": {
              "description": "Click-to-select components for property editing",
              "implementation": "onClick handlers wrapped around rendered components",
              "visual_feedback": "Selected component highlighted with blue border",
              "integration": "Updates selectedComponentId in form state"
            }
          },
          
          "rendering_system": {
            "csp_safe_rendering": {
              "description": "PWA-compliant component rendering without dangerouslySetInnerHTML",
              "implementation": "CSPSafeComponentRenderer with React components",
              "security": "Content Security Policy compliant for production deployment",
              "performance": "Direct React rendering without HTML string parsing"
            },
            "component_types": {
              "text_input": "Single-line text input with label and placeholder",
              "email_input": "Email validation input field",
              "number_input": "Numeric input with min/max constraints",
              "textarea": "Multi-line text input (4 rows default)",
              "select": "Dropdown selection with options",
              "radio_group": "Radio button group with fieldset/legend",
              "checkbox_group": "Multiple checkbox selection",
              "button": "Action button component",
              "heading": "H2 heading for form sections",
              "card": "Container component with header and content",
              "horizontal_layout": "Side-by-side component arrangement"
            },
            "adaptive_rendering": {
              "builder_mode": "Interactive components with selection handlers",
              "preview_mode": "Functional form components for testing",
              "readonly_state": "Disabled inputs for visual preview"
            }
          },
          
          "layout_management": {
            "empty_state": {
              "description": "Welcoming interface when no components exist",
              "visual_elements": {
                "icon": " clipboard icon",
                "title": "Add components here",
                "description": "Drag components from the left panel to start building your form"
              },
              "drop_functionality": "Accepts first component drop anywhere on canvas (including center) to initialize form in a column layout",
              "default_layout": "column"
            },
            "populated_state": {
              "description": "Active form building with components and drop zones",
              "layout": "Vertical stack of components with smart drop zones",
              "reordering": "Drag existing components to reposition",
              "insertion": "Drop new components between existing ones"
            },
            "horizontal_layouts": {
              "description": "Side-by-side component arrangements",
              "creation": "Drop component on left/right edge of existing component",
              "management": "Special HorizontalLayout component handles children",
              "dissolution": "Automatic cleanup when layout becomes empty or contains only one element, promoting the remaining element to the parent layout (e.g., column)"
            }
          },
          
          "interaction_patterns": {
            "component_addition": {
              "drag_from_palette": "Primary method - drag component type to canvas",
              "click_from_palette": "Alternative method - click component in palette",
              "drop_positions": {
                "empty_canvas": "Creates first component in column layout, accepts center drops",
                "before_component": "Inserts above existing component",
                "after_component": "Inserts below existing component", 
                "left_of_component": "Creates horizontal layout on left",
                "right_of_component": "Creates horizontal layout on right",
                "center_of_component": "Appends to end for populated canvas, creates first component for empty canvas"
              }
            },
            "component_manipulation": {
              "selection": "Click component to select for property editing",
              "reordering": {
                "description": "Drag existing component to new position within container (column or row layout)",
                "scope": "Rearranges existing components only, does not add or duplicate elements",
                "implementation": "Uses react-dnd with existing-item drag type",
                "container_respect": "Maintains container size and layout structure during repositioning"
              },
              "deletion": "Delete key or delete button removes component",
              "duplication": "Future feature for copying components, not part of current repositioning logic"
            },
            "visual_feedback": {
              "drop_indicators": "Blue dashed lines show drop positions",
              "hover_states": "Components highlight on mouse over",
              "selection_highlight": "Blue border and background for selected component",
              "drag_preview": "Semi-transparent component follows cursor during drag"
            }
          }
        },
        "styling": {
          "class": "canvas-card",
          "layout": "Bottom section of middle panel, spans full width",
          "styling": "Card with border, shadow, and padding"
        }
      }
    },
    
    "state_management": {
      "component_data_flow": {
        "source": "formState.pages[currentPageId].components",
        "updates": "Via updateComponent(), addComponent(), deleteComponent()",
        "persistence": "Changes saved to form state immediately",
        "history": "All changes tracked in undo/redo system"
      },
      "selection_state": {
        "tracking": "selectedComponentId in form state",
        "synchronization": "Canvas selection updates properties panel",
        "visual_sync": "Selected component highlighted in canvas"
      },
      "page_context": {
        "current_page": "Canvas shows components for active page only",
        "page_switching": "Canvas content updates when navigating pages",
        "isolation": "Each page maintains separate component list"
      }
    },
    
    "drag_drop_architecture": {
      "react_dnd_integration": {
        "drag_types": {
          "new-item": "Components dragged from palette",
          "existing-item": "Components being reordered within canvas"
        },
        "drop_acceptance": "Canvas accepts both new and existing item types",
        "drag_data": {
          "new_items": "{ type: 'new-item', itemType: componentType }",
          "existing_items": "{ type: 'existing-item', id, index, item }"
        }
      },
      "smart_drop_zones": {
        "position_calculation": "Mouse coordinates relative to component bounds",
        "threshold_configuration": {
          "horizontal": "25% from left/right edges",
          "vertical": "30% from top/bottom edges"
        },
        "visual_indicators": "Dynamic drop position labels and lines",
        "collision_detection": "Prevents invalid drop operations"
      },
      "layout_creation": {
        "horizontal_layouts": "Created when dropping on left/right edges",
        "vertical_stacking": "Default behavior for before/after drops",
        "nested_layouts": "Support for components within layout containers"
      }
    },
    
    "component_lifecycle": {
      "creation": {
        "trigger": "Drop or click from component palette",
        "id_generation": "Unique ID assigned via ComponentEngine",
        "default_properties": "Label, type, and basic configuration set",
        "canvas_insertion": "Component added to current page components array"
      },
      "rendering": {
        "data_transformation": "FormComponentData → CanvasItem → React Component",
        "property_binding": "Component properties reflected in rendered output",
        "event_handling": "Click handlers for selection, drag handlers for movement"
      },
      "updates": {
        "property_changes": "Real-time updates from properties panel",
        "position_changes": "Drag-drop reordering updates component array",
        "layout_changes": "Horizontal layout creation/dissolution"
      },
      "deletion": {
        "trigger": "Delete key, delete button, or drag to delete zone",
        "cleanup": "Component removed from page components array",
        "layout_cleanup": "Empty horizontal layouts automatically dissolved"
      }
    },
    
    "integration_points": {
      "with_component_palette": {
        "drag_source": "Palette provides draggable component types",
        "drop_target": "Canvas accepts palette component drops",
        "data_flow": "ComponentType → Canvas → FormComponentData"
      },
      "with_properties_panel": {
        "selection_sync": "Canvas selection updates panel content",
        "property_updates": "Panel changes reflect in canvas rendering",
        "bidirectional": "Both panels stay synchronized via shared state"
      },
      "with_form_state": {
        "persistence": "All canvas changes saved to form pages",
        "page_context": "Canvas shows current page components only",
        "history": "Canvas operations included in undo/redo system"
      },
      "with_wizard_navigation": {
        "page_switching": "Canvas content updates when changing pages",
        "component_isolation": "Each page maintains separate canvas state",
        "cross_page_consistency": "Component IDs unique across all pages"
      }
    },
    
    "user_experience": {
      "empty_state_guidance": {
        "visual_design": "Clean, welcoming interface with clear instructions",
        "call_to_action": "Prominent message encouraging first component addition",
        "accessibility": "Screen reader friendly with proper heading structure"
      },
      "active_building": {
        "immediate_feedback": "Components appear instantly when dropped",
        "visual_hierarchy": "Clear component boundaries and relationships",
        "intuitive_interactions": "Familiar drag-drop patterns with visual cues"
      },
      "responsive_design": {
        "canvas_sizing": "Flexible width adapts to available space",
        "component_scaling": "Components maintain readability at different sizes",
        "touch_optimization": "Larger touch targets for mobile devices"
      }
    },
    
    "accessibility": {
      "keyboard_navigation": {
        "tab_order": "Logical tab sequence through canvas components",
        "focus_indicators": "Visible focus rings on interactive elements",
        "keyboard_shortcuts": "Delete key for component removal"
      },
      "screen_reader_support": {
        "semantic_markup": "Proper HTML structure with labels and roles",
        "aria_labels": "Descriptive labels for drag-drop interactions",
        "live_regions": "Announcements for dynamic content changes"
      },
      "motor_accessibility": {
        "large_drop_zones": "Generous target areas for drag-drop operations",
        "click_alternatives": "Click-to-add as alternative to drag-drop",
        "reduced_motion": "Respects user motion preferences"
      }
    },
    
    "performance_considerations": {
      "rendering_optimization": {
        "react_keys": "Proper key props for efficient list rendering",
        "memoization": "React.memo for component render optimization",
        "lazy_loading": "Dynamic imports for heavy components"
      },
      "drag_drop_performance": {
        "throttled_updates": "Position calculations throttled during drag",
        "efficient_collision": "Optimized drop zone collision detection",
        "minimal_re_renders": "Isolated state updates prevent cascade re-renders"
      },
      "memory_management": {
        "component_cleanup": "Proper cleanup of event listeners and refs",
        "state_optimization": "Minimal state duplication across components",
        "garbage_collection": "No memory leaks from drag-drop operations"
      }
    },
    
    "error_handling": {
      "invalid_drops": {
        "type_validation": "Only accepts valid component types",
        "position_validation": "Maps center drops to empty_canvas for empty canvas, appends to end for populated canvas, prevents invalid positions",
        "graceful_fallback": "Invalid drops ignored with visual feedback"
      },
      "component_errors": {
        "unknown_types": "Fallback rendering for unsupported components",
        "missing_data": "Graceful handling of incomplete component data",
        "render_errors": "Error boundaries prevent canvas crashes"
      },
      "state_corruption": {
        "validation": "Component data validated before rendering",
        "recovery": "Automatic cleanup of invalid component references",
        "user_feedback": "Clear error messages for recoverable issues"
      }
    }
  },
  
  "workflow": {
    "form_building_process": [
      {
        "step": 1,
        "action": "User sees empty canvas with welcoming message",
        "result": "Clear guidance to drag components from palette"
      },
      {
        "step": 2,
        "action": "User drags first component from palette to canvas",
        "result": "Component appears in canvas, empty state disappears"
      },
      {
        "step": 3,
        "action": "User clicks component to select it",
        "result": "Component highlighted, properties panel shows settings"
      },
      {
        "step": 4,
        "action": "User drags additional components to specific positions",
        "result": "Smart drop zones show insertion points, components arranged"
      },
      {
        "step": 5,
        "action": "User creates horizontal layouts by dropping on edges",
        "result": "Side-by-side component arrangements created"
      },
      {
        "step": 6,
        "action": "User reorders components by dragging existing ones",
        "result": "Form structure reorganized with visual feedback"
      }
    ],
    
    "detailed_layout_workflow": [
      {
        "scenario": "Empty Canvas First Drop",
        "steps": [
          "Canvas shows empty state with drop zone",
          "User drags Text Input from palette",
          "Component appears in center of canvas",
          "No layout container created for single component"
        ]
      },
      {
        "scenario": "Vertical Layout Creation",
        "steps": [
          "User drags Email Input above existing Text Input (top 30% zone)",
          "Drop indicator shows insertion point above Text Input",
          "Email Input inserted before Text Input in column layout",
          "Components arranged vertically: Email Input → Text Input"
        ]
      },
      {
        "scenario": "Horizontal Layout Creation",
        "steps": [
          "User drags Number Input to left side of Text Input (left 25% zone)",
          "Drop indicator shows horizontal arrangement preview",
          "HorizontalLayout container created with both components",
          "Components arranged side-by-side: Number Input | Text Input"
        ]
      },
      {
        "scenario": "Component Reordering in Column",
        "steps": [
          "User drags existing Email Input below Text Input",
          "Drop zones appear between all components",
          "Email Input moves to new position in column",
          "Final order: Text Input → Email Input"
        ]
      },
      {
        "scenario": "Component Reordering in Row",
        "steps": [
          "User drags Number Input to right side within HorizontalLayout",
          "Left/right drop indicators appear within row",
          "Components reorder within HorizontalLayout children",
          "Final arrangement: Text Input | Number Input"
        ]
      },
      {
        "scenario": "Layout Dissolution",
        "steps": [
          "User removes Number Input from HorizontalLayout (only Text Input remains)",
          "System detects single child in HorizontalLayout",
          "HorizontalLayout container automatically removed",
          "Text Input promoted to parent level at same position"
        ]
      },
      {
        "scenario": "Cross-Layout Movement",
        "steps": [
          "User drags component from row layout to column position",
          "Component extracted from source HorizontalLayout",
          "Source layout checked for dissolution (if single child remains)",
          "Component inserted at target column position",
          "Both layouts updated with new structure"
        ]
      }
    ],
    
    "component_interaction_scenarios": [
      {
        "scenario": "Adding First Component",
        "steps": [
          "Empty canvas displays welcome message",
          "User drags text input from palette",
          "Component appears in center of canvas",
          "Canvas switches to populated state"
        ]
      },
      {
        "scenario": "Creating Horizontal Layout",
        "steps": [
          "User drags component to left edge of existing component",
          "Drop indicator shows horizontal arrangement",
          "Horizontal layout created with both components",
          "Components displayed side-by-side"
        ]
      },
      {
        "scenario": "Reordering Components",
        "steps": [
          "User drags existing component",
          "Drop zones appear between other components",
          "User drops in desired position",
          "Component list reordered, canvas updates"
        ]
      }
    ]
  },
  
  "technical_implementation": {
    "drag_drop_flowchart": {
      "description": "Complete drag-drop decision tree for layout management",
      "mermaid_diagram": "graph TD\n    Start[Start Drag: New or Existing Element] --> IsNew{Is New Element?}\n    \n    IsNew -->|Yes| EmptyCheck{Canvas Empty?}\n    EmptyCheck -->|Yes| AddFirst[Add to Canvas in Column Layout]\n    AddFirst --> UpdateJSON[Update JSON Structure]\n    \n    EmptyCheck -->|No| PositionDetect[Detect Drop Position]\n    PositionDetect --> Pos{Position?}\n    \n    Pos -->|Top| InsertBefore[Insert Before Existing in Vertical]\n    Pos -->|Bottom| InsertAfter[Insert After Existing in Vertical]\n    Pos -->|Left| CreateHorizontalLeft[Create/Add to Row Layout on Left]\n    Pos -->|Right| CreateHorizontalRight[Create/Add to Row Layout on Right]\n    \n    InsertBefore --> UpdateLayout[Update Vertical Sequence]\n    InsertAfter --> UpdateLayout\n    CreateHorizontalLeft --> UpdateHorizontal[Create/Update Row Container]\n    CreateHorizontalRight --> UpdateHorizontal\n    \n    UpdateLayout --> UpdateJSON\n    UpdateHorizontal --> UpdateJSON\n    \n    IsNew -->|No (Existing)| Reorder[Reorder: Drag to New Position]\n    Reorder --> NewPos{New Position?}\n    \n    NewPos -->|Vertical| UpdateVertical[Update Vertical Sequence]\n    NewPos -->|Horizontal| UpdateHoriz[Update Horizontal Sequence in Row]\n    \n    UpdateVertical --> CheckContainer[Check if Old Container Empty?]\n    UpdateHoriz --> CheckContainer\n    \n    CheckContainer -->|Yes| Dissolve[Dissolve Row Container, Promote Remaining Element]\n    CheckContainer -->|No| UpdateJSON\n    \n    Dissolve --> UpdateJSON\n    \n    UpdateJSON --> End[End: Reflect in Canvas & Save to JSON]",
      "decision_points": {
        "element_type": "New component from palette vs existing component reorder",
        "canvas_state": "Empty canvas vs populated canvas with existing components",
        "drop_position": "Top/Bottom (vertical) vs Left/Right (horizontal) positioning",
        "container_check": "Automatic dissolution when container has single child"
      },
      "process_flow": {
        "new_element_path": "Palette → Position Detection → Layout Creation → JSON Update",
        "existing_element_path": "Canvas → Reorder → Container Check → Dissolution → JSON Update",
        "layout_management": "Automatic container creation and dissolution based on child count"
      }
    },
    "architecture_layers": [
      "Canvas.tsx - Main interface component",
      "FormCanvasAdapter.tsx - Data transformation layer", 
      "DragDropCanvas.tsx - Generic drag-drop functionality",
      "SmartDropZone.tsx - Position-aware drop handling",
      "CSPSafeComponentRenderer.tsx - PWA-compliant rendering"
    ],
    "key_dependencies": [
      "react-dnd (drag and drop functionality)",
      "useFormBuilder hook (state management)",
      "ComponentRenderer (component metadata)",
      "FormStateEngine (action processing)"
    ],
    "data_flow": [
      "FormComponentData[] → CanvasItem[] → React Components",
      "User interactions → Canvas events → FormBuilder actions",
      "State updates → Re-render → Visual feedback"
    ]
  }
}
