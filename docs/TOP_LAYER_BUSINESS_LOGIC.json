{
  "form_builder_top_layer": {
    "name": "Form Builder Top Layer (Header & Navigation)",
    "purpose": "Provide top-level form actions and template management controls",
    "location": "src/features/form-builder/components/FormBuilder.tsx",
    
    "business_logic": {
      "top_navigation_bar": {
        "description": "Action buttons for form-level operations",
        "implementation": {
          "component": "form-builder__top-nav section",
          "layout": "Horizontal button bar at top of interface",
          "actions": {
            "load_json": {
              "button_text": "üìÅ Load JSON",
              "description": "Import form template from JSON file",
              "implementation": "TODO: File input dialog and JSON parsing",
              "validation": "Validate JSON structure before loading"
            },
            "clear_all": {
              "button_text": "Clear All",
              "description": "Remove all components from current form",
              "implementation": "Uses react-drag-canvas package architecture with FormCanvasAdapter",
              "npm_package_integration": "Clear action works through DragDropCanvas component",
              "safety": "Requires user confirmation before clearing"
            },
            "preview": {
              "button_text": "üëÅÔ∏è Preview",
              "description": "Show form in preview mode for testing",
              "implementation": "TODO: Switch to preview rendering mode",
              "functionality": "Renders functional form for user testing"
            },
            "export_json": {
              "button_text": "üíæ Export JSON",
              "description": "Download form structure as JSON file",
              "implementation": "TODO: Generate JSON and trigger download",
              "format": "Complete form schema with all pages and components"
            },
            "undo": {
              "button_text": "‚Ü∂ Undo",
              "description": "Revert last action",
              "implementation": "TODO: Connect to history management",
              "state": "Disabled when no actions to undo"
            },
            "redo": {
              "button_text": "‚Ü∑ Redo",
              "description": "Restore previously undone action",
              "implementation": "TODO: Connect to history management",
              "state": "Disabled when no actions to redo"
            }
          }
        },
        "styling": {
          "class": "form-builder__top-nav",
          "layout": "Fixed at top of interface",
          "button_groups": "Separated by dividers for logical grouping"
        }
      }
    },
    
    "integration_points": {
      "with_middle_panel": {
        "description": "Top actions affect middle panel content",
        "load_json": "Updates form title and canvas content",
        "clear_all": "Resets both form/page card and canvas card",
        "preview": "Changes canvas rendering mode"
      },
      "with_form_state": {
        "description": "All actions operate on global form state",
        "state_management": "Via useFormBuilder hook",
        "persistence": "Changes saved to form state immediately"
      }
    },
    
    "user_interactions": {
      "button_clicks": {
        "immediate_feedback": "Visual button press states",
        "confirmation_dialogs": "For destructive actions like Clear All",
        "progress_indicators": "For async operations like Load JSON"
      },
      "keyboard_shortcuts": {
        "undo": "Ctrl+Z / Cmd+Z",
        "redo": "Ctrl+Y / Cmd+Y",
        "preview": "Ctrl+P / Cmd+P"
      }
    },
    
    "accessibility": {
      "button_labels": "Clear descriptive text for all actions",
      "keyboard_navigation": "Tab order through action buttons",
      "screen_reader_support": "Proper ARIA labels and button roles",
      "disabled_states": "Visual and programmatic disabled states"
    },
    
    "npm_package_evolution": {
      "description": "Top layer actions now operate through react-drag-canvas package",
      "architecture": "Actions flow through FormCanvasAdapter to DragDropCanvas",
      "security": "CSP-safe rendering for PWA compliance",
      "conversation_context": {
        "original_issue": "Canvas component used repetitive HTML instead of shared components",
        "refactoring_goal": "Make components shared and reusable",
        "final_solution": "react-drag-canvas NPM package with 95% publication readiness",
        "reusability_achievement": "Generic package works for forms, dashboards, any drag-drop interface"
      }
    }
  }
}
